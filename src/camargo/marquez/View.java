/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package camargo.marquez;

import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Stack;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JesusCamargo
 */
public class View extends javax.swing.JFrame {

    /**
     * Creates new form View
     */
    public View() {
        initComponents();
        grammarTextArea.setVisible(false);
        resultTextArea.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        impFileChooser = new javax.swing.JFileChooser();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        grammarTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        firstFollowTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        mTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        parserTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fileTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        strTextField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        grammarTextArea.setColumns(20);
        grammarTextArea.setRows(5);
        jScrollPane1.setViewportView(grammarTextArea);

        resultTextArea.setColumns(20);
        resultTextArea.setRows(5);
        jScrollPane2.setViewportView(resultTextArea);

        jLabel3.setText("Result");

        jLabel4.setText("Input");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Grammar", jPanel1);

        firstFollowTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(firstFollowTable);

        jTabbedPane1.addTab("First-Follow", jScrollPane3);

        mTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(mTable);

        jTabbedPane1.addTab("M-Table", jScrollPane4);

        parserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(parserTable);

        jTabbedPane1.addTab("Verification Table", jScrollPane5);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Syntax Analysis.");

        jLabel2.setText("Grammar File:");

        jButton1.setText("Load File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Text to verify:");

        jButton2.setText("Verify");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(strTextField))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(strTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text File","txt","csv","text");
        impFileChooser.setFileFilter(filter);
        int option = impFileChooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File grammarFile = impFileChooser.getSelectedFile();
            cfg.loadFromFile(grammarFile);
            fileTextField.setText(grammarFile.getAbsolutePath());
            grammarTextArea.setVisible(true);
            resultTextArea.setVisible(true);
            grammarTextArea.setEditable(false);
            resultTextArea.setEditable(false);
            grammarTextArea.setText(cfg.toString());
            cfg.validate();
            resultTextArea.setText(cfg.toString());
            String[] mTableColumns = getMTableColumns(cfg.getNonTerminals());
            String[][] mTableMatrix = getMTableMatrix(cfg.getNonTerminals().size(), mTableColumns.length, mTableColumns);
//            for (int i = 0; i < mTableColumns.length; i++) {
//                System.out.println(mTableColumns[i]);
//            }
//           
//            for (int i = 0; i < cfg.getNonTerminals().size(); i++) {
//                for (int j = 0; j < mTableColumns.length; j++) {
//                    System.out.println("content: " + mTableMatrix[i][j]);
//                }
//            }
            mTable.setModel(new DefaultTableModel(mTableMatrix,mTableColumns));
            updateFirstFollowTable();
        }
        //System.out.println(cfg.getS());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String str = strTextField.getText();
        if (str != null && !str.isEmpty()) {
            verificationTable(str);
        }else{
            verificationTable("");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    ContextFreeGrammar cfg = new ContextFreeGrammar();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fileTextField;
    private javax.swing.JTable firstFollowTable;
    private javax.swing.JTextArea grammarTextArea;
    private javax.swing.JFileChooser impFileChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable mTable;
    private javax.swing.JTable parserTable;
    private javax.swing.JTextArea resultTextArea;
    private javax.swing.JTextField strTextField;
    // End of variables declaration//GEN-END:variables
    
    
    private String[] getMTableColumns(LinkedHashMap<String,ArrayList<String>> hashMap){
       int cant = 0;
       LinkedHashSet<String> terms = new LinkedHashSet<>();
       terms.add("NoTerm|Term");
       hashMap.forEach((header,prods)->{
          for(String prod : prods){
              for (int i = 0; i < prod.length(); i++) {
                  String symbol = prod.charAt(i)+"";
                  if(symbol.toLowerCase().equals(symbol) && !symbol.equals("'") && !symbol.equals("&")){//terminal
                      terms.add(symbol);
                  }
              }
          }
       });
       terms.add("$");
       String[] columns = new String[terms.size()];
       for(String term : terms){
           columns[cant] = term;
           cant++;
       }
       return columns;
    }
    
    private String[][] getMTableMatrix(int rows, int columns, String[] terminals){
        ArrayList<String> terminalArrayList = new ArrayList<>();
        ArrayList<String> noTerminalArrayList = new ArrayList<>();
        LinkedHashMap<String,ArrayList<String>> prodMap = cfg.getNonTerminals();
        LinkedHashMap<String,LinkedHashSet<String>> firstMap = cfg.getFirstMap();
        LinkedHashMap<String,LinkedHashSet<String>> followMap = cfg.getFollowMap();
        String[][] matrix = new String[rows][columns];
        for (int i = 0; i < terminals.length; i++) {
            terminalArrayList.add(terminals[i]);
        }
        prodMap.forEach((headerProd,prod)->{
            noTerminalArrayList.add(headerProd);
        });
        for (int j = 0; j < noTerminalArrayList.size(); j++) {
            matrix[j][0] = noTerminalArrayList.get(j);
        }
        firstMap.forEach((headerFirst,symbolsFirst)->{
            symbolsFirst.forEach((sym)->{
                if(!sym.equals("&")){
                    prodMap.forEach((headerProd,prods)->{
                        prods.forEach((prod)->{
                                if(prod.contains(sym) ||
                                   (firstMap.containsKey(prod.charAt(0)+"") &&
                                   firstMap.get(prod.charAt(0)+"").contains(sym))){
                                    System.out.println("sym: " + sym);
                                    //System.out.println("matrix length: (" + matrix.length + ", " +matrix[0].length + ")");
                                    System.out.println("i, j: (" + noTerminalArrayList.indexOf(headerProd) + ", " + terminalArrayList.indexOf(sym) + ")");
                                    matrix[noTerminalArrayList.indexOf(headerProd)][terminalArrayList.indexOf(sym)] = 
                                       headerProd+"->"+prod;
                                    if (!cfg.mTableHash.isEmpty() && cfg.mTableHash.containsKey(headerProd)) {
                                       cfg.mTableHash.get(headerProd).put(sym, prod);
                                    }else{
                                        LinkedHashMap<String,String> temp = new LinkedHashMap<>();
                                        temp.put(sym, prod);
                                        cfg.mTableHash.put(headerProd, temp);
                                    }
                                }
                        });
                    });
                }else{
                    LinkedHashSet<String> follow = followMap.get(headerFirst);
                    follow.forEach((term)->{
                        matrix[noTerminalArrayList.indexOf(headerFirst)][terminalArrayList.indexOf(term)] = 
                                headerFirst+"->"+"&";
                        if (!cfg.mTableHash.isEmpty() && cfg.mTableHash.containsKey(headerFirst)) {
                            cfg.mTableHash.get(headerFirst).put(term, "&");
                         }else{
                             LinkedHashMap<String,String> temp = new LinkedHashMap<>();
                             temp.put(term, "&");
                             cfg.mTableHash.put(headerFirst, temp);
                         }
                    });
                }
            });
        });
        return matrix;
    }
    
    private void updateFirstFollowTable(){
        String[] columns = {"Non-terminal","First","Follow"};
        String[][] content = new String[cfg.getNonTerminals().keySet().size()][3];
        int i = 0;
        for (String nonTerminal : cfg.getNonTerminals().keySet()) {
            content[i][0]=nonTerminal;
            content[i][1]=cfg.getFirstMap().get(nonTerminal).toString();
            content[i][2]=cfg.getFollowMap().get(nonTerminal).toString();
            i++;
        }
        firstFollowTable.setModel(new DefaultTableModel(content,columns));
    }
    
    private void verificationTable(String s){
        String [] columns = {"Stack","Input","Output"};
        ArrayList<String[]> res = cfg.verify(s);
        String[][] content = new String[res.size()][3];
        for (int i = 0; i < content.length; i++) {
            content[i] = res.get(i);
        }
        parserTable.setModel(new DefaultTableModel(content,columns));
    }
}
